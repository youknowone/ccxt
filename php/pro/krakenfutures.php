<?php

namespace ccxt\pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use React\Async;

class krakenfutures extends \ccxt\async\krakenfutures {

    use ClientTrait;

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'has' => array(
                'ws' => true,
                'watchBalance' => false, // for now
                'watchMyTrades' => false, // for now
                'watchOHLCV' => false, // for now
                'watchOrderBook' => false, // for now
                'watchOrders' => false, // for now
                'watchTicker' => true,
                'watchTickers' => false, // for now
                'watchTrades' => false, // for now
                // 'watchHeartbeat' => true,
                // 'watchStatus' => true,
            ),
            'urls' => array(
                'api' => array(
                    'ws' => array(
                        'public' => 'wss://futures.kraken.com/ws/v1',
                    ),
                ),
            ),
            // 'versions' => array(
            //     'ws' => '0.2.0',
            // ),
            'options' => array(
                'tradesLimit' => 1000,
                'OHLCVLimit' => 1000,
                'ordersLimit' => 1000,
                'symbolsByOrderId' => array(),
                'checksum' => true,
            ),
            'exceptions' => array(
                'ws' => array(
                    'exact' => array(
                        'Event(s) not found' => '\\ccxt\\BadRequest',
                    ),
                    'broad' => array(
                        'Currency pair not in ISO 4217-A3 format' => '\\ccxt\\BadSymbol',
                    ),
                ),
            ),
        ));
    }

    public function handle_ticker($client, $message) {
        //
        //   {
        //     "time" => 1612270825253,
        //     "feed" => "ticker",
        //     "product_id" => "PI_XBTUSD",
        //     "bid" => 34832.5,
        //     "ask" => 34847.5,
        //     "bid_size" => 42864,
        //     "ask_size" => 2300,
        //     "volume" => 262306237,
        //     "dtm" => 0,
        //     "leverage" => "50x",
        //     "index" => 34803.45,
        //     "premium" => 0.1,
        //     "last" => 34852,
        //     "change" => 2.995109121267192,
        //     "funding_rate" => 3.891007752e-9,
        //     "funding_rate_prediction" => 4.2233756e-9,
        //     "suspended" => false,
        //     "tag" => "perpetual",
        //     "pair" => "XBT:USD",
        //     "openInterest" => 107706940,
        //     "markPrice" => 34844.25,
        //     "maturityTime" => 0,
        //     "relative_funding_rate" => 0.000135046879166667,
        //     "relative_funding_rate_prediction" => 0.000146960125,
        //     "next_funding_rate_time" => 1612281600000,
        //     "volumeQuote" => 262306237
        //   }
        //
        $product_id = $this->safe_string_lower($message, 'product_id');
        $name = 'ticker';
        $market = $this->market($product_id);
        $symbol = $market['symbol'];
        $messageHash = $name . ':' . $symbol;
        $timestamp = $this->milliseconds();
        $result = array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => null,
            'low' => null,
            'bid' => $this->safe_float($message, 'bid'),
            'bidVolume' => $this->safe_float($message, 'bid_size'),
            'ask' => $this->safe_float($message, 'ask'),
            'askVolume' => $this->safe_float($message, 'ask_size'),
            'vwap' => null,
            'open' => null,
            'close' => null,
            'last' => $this->safe_float($message, 'last'),
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_float($message, 'volume'),
            'quoteVolume' => $this->safe_float($message, 'volumeQuote'),
            'info' => $message,
        );
        $this->tickers[$symbol] = $result;
        $client->resolve ($result, $messageHash);
    }

    public function watch_public($name, $symbol, $params = array ()) {
        return Async\async(function () use ($name, $symbol, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $messageHash = $name . ':' . $market['symbol'];
            $url = $this->urls['api']['ws']['public'];
            $subscribe = array(
                'event' => 'subscribe',
                'feed' => $name,
                'product_ids' => [
                    $market['id'],
                ],
            );
            $request = $this->deep_extend($subscribe, $params);
            return Async\await($this->watch($url, $messageHash, $request, $messageHash));
        }) ();
    }

    public function watch_ticker($symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
             * @param {string} $symbol unified $symbol of the market to fetch the ticker for
             * @param {array} $params extra parameters specific to the kraken api endpoint
             * @return {array} a {@link https://docs.ccxt.com/en/latest/manual.html#ticker-structure ticker structure}
             */
            return Async\await($this->watch_public('ticker', $symbol, $params));
        }) ();
    }

    public function watch_heartbeat($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $event = 'heartbeat';
            $url = $this->urls['api']['ws']['public'];
            return Async\await($this->watch($url, $event));
        }) ();
    }

    public function handle_heartbeat($client, $message) {
        //
        // every second (approx) if no other updates are sent
        //
        //     array( "event" => "heartbeat" )
        //
        $event = $this->safe_string($message, 'event');
        $client->resolve ($message, $event);
    }

    public function authenticate($params = array ()) {
        return Async\async(function () use ($params) {
            $url = $this->urls['api']['ws']['private'];
            $client = $this->client($url);
            $authenticated = 'authenticated';
            $subscription = $this->safe_value($client->subscriptions, $authenticated);
            if ($subscription === null) {
                $response = Async\await($this->privatePostGetWebSocketsToken ($params));
                //
                //     {
                //         "error":array(),
                //         "result":{
                //             "token":"xeAQ\/RCChBYNVh53sTv1yZ5H4wIbwDF20PiHtTF+4UI",
                //             "expires":900
                //         }
                //     }
                //
                $subscription = $this->safe_value($response, 'result');
                $client->subscriptions[$authenticated] = $subscription;
            }
            return $this->safe_string($subscription, 'token');
        }) ();
    }

    public function handle_subscription_status($client, $message) {
        //
        // public
        //
        //   {
        //     "event" => "subscribed",
        //     "feed" => "ticker",
        //     "product_ids" => array(
        //       "PI_XBTUSD"
        //     )
        //   }
        //
        // private
        //
        //   {
        //     "event" => "subscribed",
        //     "feed" => "open_orders",
        //     "api_key" => "CMl2SeSn09Tz+2tWuzPiPUjaXEQRGq6qv5UaexXuQ3SnahDQU/gO3aT+",
        //     "original_challenge" => "226aee50-88fc-4618-a42a-34f7709570b2",
        //     "signed_challenge":"RE0DVOc7vS6pzcEjGWd/WJRRBWb54RkyvV+AZQSRl4+rap8Rlk64diR+Z9DQILm7qxncswMmJyvP/2vgzqqh+g=="
        //   }
        //
        $client->subscriptions[$message['feed']] = $message;
    }

    public function handle_error_message($client, $message) {
        //
        //   {
        //     "event" => "error",
        //     "message" => "Invalid product id"
        //   }
        //
        // TODO => handle error $message
        return true;
    }

    public function handle_message($client, $message) {
        $name = $message['feed'];
        $event = $this->safe_value($message, 'event');
        if ($event !== null) {
            return $this->handle_subscription_status($client, $message);
        }
        $methods = array(
            // public
            'ticker' => array($this, 'handle_ticker'),
        );
        $method = $this->safe_value($methods, $name);
        if ($method === null) {
            return $message;
        } else {
            return $method($client, $message);
        }
    }
}
